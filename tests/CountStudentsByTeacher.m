classdef CountStudentsByTeacher < DatabaseAnalysis 
        
    properties
        randomErrors = false;
    end
    
    methods
        function da = CountStudentsByTeacher(varargin)
            da = da@DatabaseAnalysis(varargin{:});
        end
        
        % return a single word descriptor for this analysis, ignoring parameter
        % settings in param. The results will be stored as a DataTable with this
        % as the entryName
        function name = getName(da)
            name = 'countStudentsByTeacher';
        end

        % return a list of fields generated by the analysis. These need to be declared
        % ahead of time to simplify many of the caching related features.
        function [fields fieldDescriptorMap] = getFieldsAnalysis(da)
            fieldDescriptorMap = ValueMap('KeyType', 'char', 'ValueType', 'any');
            fieldDescriptorMap('nStudents') = ScalarField();
            fieldDescriptorMap('nonDisplayableField') = UnspecifiedField();

            fields = fieldDescriptorMap.keys;
        end

        function param = getCacheParam(da)
            param = [];
        end
        
        function hash = generateHashForEntry(da, entry, hash, cacheName, cacheParam)
            % by default, keep hash as it is, but analysis can choose to redefine the hash however it wants
            % taking on the risk of non-uniqueness. A common overwrite would be to use entry.getKeyFieldValueDescriptors() {1}
            % and then factor in param 
            desc = entry.getKeyFieldValueDescriptors();
            hash = desc{1};
        end
        
        function prefix = getCacheFilePrefix(da)
            prefix = 'customPrefix_';
        end
        
        function tf = getCacheFieldsIndividually(da)
            tf = false;
        end

        % return a string used to describe the params used for this analysis
        % should encompass whatever is returned by getCacheParam()
        function str = getDescriptionParam(da)
            str = '';
        end
        
        function views = getRequiredViews(da)
            views = { };
        end

        % return the entryName corresponding to the table in the database which this
        % analysis runs on. The DataTable with this entry name will run this analysis
        % once on each entry and map the results via a 1-1 relationship 
        function entryName = getMapsEntryName(da)
            entryName = 'teacher';
        end

        % run this analysis on the particular 
        function resultStruct = runOnEntry(da, entry, fields)
            resultStruct.nonDisplayableField = 'this shouldn''t show up in the html report';
            resultStruct.nStudents = entry.classes.students.nEntries;

            if da.randomErrors && rand() < 0.2
                error('Something messed up!');
            end

            fprintf('Output pre fig 1\n');

%             figure(1); clf;
%             plot(rand(20,10));
%             xlabel('X axis');
%             ylabel('Y axis');
%             title('Figure 1');
%             box off
%             da.saveFigure(gcf, 'Figure 1', 'Figure 1 Caption');

%             fprintf('Output pre fig 2\n');
            
%             figure(2); clf;
%             plot(rand(20,10), 'kx', 'MarkerSize', 20);
%             box off
%             xlabel('X axis');
%             ylabel('Y axis');
%             title('Figure 2');
%             da.saveFigure(gcf, 'Figure 2', 'Figure 2 Caption');
%             fprintf('Output post fig2\n');
        end
    end

end
