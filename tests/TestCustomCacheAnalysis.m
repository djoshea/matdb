classdef TestCustomCacheAnalysis < DatabaseAnalysis 
    
    methods
        function da = TestCustomCacheAnalysis(varargin)
            da = da@DatabaseAnalysis(varargin{:});
        end

        % return a list of fields generated by the analysis. These need to be declared
        % ahead of time to simplify many of the caching related features.
        function fields = getFieldsAnalysis(da) %#ok<*MANU>
            fields.nonCustom = ScalarField();
            fields.custom = UnspecifiedField();
        end

        function param = getCacheParam(da)
            param = struct();
        end
        
        function hash = generateHashForEntry(da, entry, hash, cacheName, cacheParam) %#ok<INUSL,INUSD>
            % by default, keep hash as it is, but analysis can choose to redefine the hash however it wants
            % taking on the risk of non-uniqueness. A common overwrite would be to use entry.getKeyFieldValueDescriptors() {1}
            % and then factor in param 
            desc = entry.getKeyFieldValueDescriptors();
            hash = desc{1};
        end
        
        function prefix = getCacheFilePrefix(da)
            prefix = 'cacheCustomPrefix_';
        end
        
        function lookup = getCustomCacheSuffixForFieldLookup(da)
            lookup.custom = '.trialData';
        end

        function entryName = getMapsEntryName(da)
            entryName = 'teacher';
        end

        % run this analysis on the particular 
        function r = runOnEntry(da, entry, fields) %#ok<INUSD>
            r.nonCustom = 1;
            
            td = TrialData();
            td.cacheWithSaveFast = true;
            r.custom = td;
          
        end
    end

end
